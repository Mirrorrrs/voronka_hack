// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())
    login String
    hash String
    balance Float @default(0)

    name String
    surname String?
    second_name String?

    room String?

    age Int?

    phone String?
    email String?

    diagnozes Diagnoz[] @relation("UserDiagnoz")


    parent_id Int?
    parent User? @relation("ParentChild", fields: [parent_id], references: [id])

    children User[] @relation("ParentChild")

    camp_admin Camp?  @relation("CampAdmin")
    group_leader Group? @relation("GroupLeader")

    camp_member_id Int?
    camp_member Camp? @relation("CampMember",fields:[camp_member_id], references:[id])

    group_member_id Int?
    group_member Group? @relation("GroupMember",fields:[group_member_id], references:[id])

    reviews Review[] @relation("UserReview")

    messages Message[] @relation("MessageSender")

    role Int @default(0)

    transactions Transaction[] @relation("UserTransaction")

    wallet_hash String?

    @@map("user")
}

model Role {
    id Int @id @default(autoincrement())
    name String
    binary Int

    @@map("role")
}

model Camp {
     id Int @id @default(autoincrement())
     name String
     admin_id Int
     admin User @relation("CampAdmin", fields:[admin_id], references:[id])
     members User[] @relation("CampMember")
     groups Group[] @relation("CampGroup")
     longitude Float?
     latitude Float?

     @@map("camp")
}

model Group {
    id Int @id @default(autoincrement())
    name String
    leader_id Int?
    leader User? @relation("GroupLeader", fields:[leader_id], references:[id])
    members User[] @relation("GroupMember")
    chats Chat[] @relation("GroupChat")
    alerts GroupAlert[] @relation("GroupAlerts")
    schedules Schedule[] @relation("Schedules")

    camp_id Int
    camp Camp @relation("CampGroup", fields:[camp_id], references:[id])

    @@map("group")
}

model Chat {
    id Int @id @default(autoincrement())
    name String

    group_id Int
    group Group @relation("GroupChat", fields:[group_id], references:[id])

    access_binary Int

    messages Message[] @relation("ChatMessage")

    @@map("chat")
}

model Message {
     id Int @id @default(autoincrement())
     message String

     sender_id Int
     sender User @relation("MessageSender", fields:[sender_id], references:[id])

     chat_id Int
     chat Chat @relation("ChatMessage", fields:[chat_id], references:[id])

     @@map("message")
}

model GroupAlert {
    id Int @id @default(autoincrement())
    message String

    group_id Int
    group Group @relation("GroupAlerts", fields:[group_id], references:[id])

    @@map("group_alert")
}

model Schedule {
    id Int @id @default(autoincrement())
    date DateTime @default(now())
    time_from DateTime
    time_to DateTime
    action String

    group_id Int
    group Group @relation("Schedules", fields:[group_id], references:[id])

    @@map("schedule")
}

model Diagnoz {
      id Int @id @default(autoincrement())
      user_id Int
      user User @relation("UserDiagnoz", fields:[user_id], references:[id])
      title String
      description String

      @@map("diagnoz")
}

model Review {
     id Int @id @default(autoincrement())
     date DateTime @default(now())
     user_id Int
     user User @relation("UserReview", fields:[user_id], references:[id])
     marks Int[]
     comment String?

     @@map("review")
}

model Transaction {
    id Int @id @default(autoincrement())
    date DateTime @default(now())
    status Boolean @default(false)
    hash String @unique
    value Float

    user_id Int
    user User @relation("UserTransaction", fields:[user_id], references:[id])

    @@map("transaction")
}